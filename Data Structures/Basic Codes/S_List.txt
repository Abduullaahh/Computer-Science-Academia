template<class T>
class List
{
private:
	class Node
	{
	public:
		T data;
		Node* next;
	};
	Node* head;
	Node* tail;
public:
	List()
	{
		head = NULL;
		tail = NULL;
	}

	void insertSorted(T const element)
	{
		/*Node* temp = new Node;
		temp -> next = head;
		temp -> data = var;
		while (head != NULL)
		{
			if ((temp -> next -> data) < (temp -> data))
			{
				Node* Temp -> data = temp -> data;
				temp -> data = temp -> next -> data;
				temp -> next -> data = Temp -> data;
			}
			else
			{
				temp = temp -> next;
			}
		}*/
		Node* temp = new Node;
		temp -> data = element;
		temp -> next = head;
			
		if (head == NULL)
		{
			head = tail = temp;
		}
		else
		{
			head = temp;
			tail -> next = NULL;
		}
	
		/*if (head != NULL)
		{
			Node* temp = new Node;
			temp -> data = element;
			temp -> next = NULL;
			tail = temp;
		}
		else
		{
			insertAtStart(element);
		}*/
	}

	void print() const
	{
		Node* curr = head;
		cout << "Data : ";
		while (curr != NULL)
		{
			cout << curr -> data << ", ";
			curr = curr -> next;
		}
		cout << endl;
	}

	void printNth(int index)
	{
		Node* curr = head;
		int i = 0;
		if (index < 8)
		{
			while (i < index - 1)
			{
				curr = curr -> next;i++;
			}
			cout << index << "th term : " << curr -> data;
			cout << endl;
		}
		else
		{
			cout << "Out of range\n";
		}
	}

	void deleteAtStart ()
	{
		if (head != NULL)
		{
			Node* temp = head;
			head = head -> next;
			delete temp;
			temp = NULL;
		}
		else
		{
			tail = NULL;
		}
	}

	void deleteAtTail()
	{
		if (head == NULL)
		{
			Node* temp = tail;
			delete temp;
		}
		if (head != NULL)
		{
				
			if (head == tail)
			{
				delete head;
				head = tail = NULL;
			}
			else
			{
				Node* temp = head;
				while (temp -> next != tail)
				{
					temp = temp -> next;
				}
				delete tail;
				tail = temp;
				tail -> next = NULL;
			}
		}
	}

	bool search(T const& element) const
	{
		Node* curr = head;
		while (curr != NULL)
		{
			if (curr -> data == element)
			{
				return true;
			}
			else
			{
				curr = curr -> next;
			}
		}
		return false;
	}
	/*~List
	{
		Node* temp = head;
		while (temp != NULL)
		{
		delete head;
		delete tail;
		}
	}*/
};

int main()
{
	List<int>object; int var;
	object.insertSorted(4);
	object.insertSorted(7);
	object.insertSorted(9);
	object.insertSorted(6);
	object.insertSorted(3);
	object.insertSorted(7);
	object.insertSorted(1);
	object.print();
	cout << "Enter index of the element you want to print : "; cin >> var;
	object.printNth(var);
	object.deleteAtStart();
	object.deleteAtTail();
	cout << "After deletion "; object.print();
	cout << "Enter element to search : "; cin >> var;
	if (object.search(var))
	{
		cout << "Element exists\n";
	}
	else
	{
		cout << "Element does not exists\n";
	}
	system("pause");
	return 0;
}